rules_version = '2';

function isAuthenticated() {
  return request.auth.uid != null;
}

function isUser(id) {
  return isAuthenticated() && request.auth.uid == id;
}

function isVerifiedCAV() {
  // TODO: Actually use auth claims
  return isAuthenticated() && true;
}

function isVerifiedPIN() {
  // TODO: Actually use auth claims
  return isAuthenticated() && true;
}

function currentUserIsCurrentPINRef(database, data) {
  return isAuthenticated() &&
  ('pinUserRef' in data) &&
  data.pinUserRef == /databases/$(database)/documents/users/$(request.auth.uid)
}

function currentUserIsCurrentCAVRef(database, data) {
  return isAuthenticated() &&
     ('cavUserRef' in data) &&
     data.cavUserRef == /databases/$(database)/documents/users/$(request.auth.uid)
}

function confirmEitherPINorCAV(database, data) {
    return currentUserIsCurrentPINRef(database, data) || currentUserIsCurrentCAVRef(database, data)
}

function isNotSameCAVPIN(request) {
  return request.resource.data.cavUserRef != request.resource.data.pinUserRef
}

function verifyUserDataComplete(request) {
   return request.resource.data.averageRating >= 1 &&
          request.resource.data.casesCompleted >= 0 &&
          request.resource.data.requestsMade >= 0 &&
          ('username' in request.resource.data)
}

// TODO: Further validate address object.
function verifyUserPrivilegedInformationDataComplete(request) {
   return ('address' in request.resource.data) &&
          ('termsAccepted' in request.resource.data) &&
          ('termsVersion' in request.resource.data)
}

service cloud.firestore {
  match /databases/{database}/documents {
    // Catch all -- Dont read/write to collections without rules
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{userID} {
      // Anyone can read your profile
      allow read: if isAuthenticated();
      // Only you can edit your own profile
      allow write: if isUser(userID) && verifyUserDataComplete(request);
    }

    // 1: Read + Writes to sub-collection can only be done by the owner
    // 2: Writes to sub-collections must match userID chain so we can always directly reference
    match /users/{userID}/privilegedInformation/{subDocID} {
        allow read: if isUser(userID) && userID == subDocID;
        allow write: if isUser(userID) && userID == subDocID && verifyUserPrivilegedInformationDataComplete(request);
    }

    match /offers/{offerID} {
      // Only the PIN or CAV of the request can read the offers
      allow read: if confirmEitherPINorCAV(database, get(/databases/$(database)/documents/offers/$(offerID)).data)
      // Only CAVs can submit offers (as themselves)
      allow write: if isVerifiedCAV() && currentUserIsCurrentCAVRef(database, request.resource.data);
    }

    match /requests/{reqID} {
      // Only CAVs can see requests
      allow read: if isVerifiedCAV();
      allow write: if isVerifiedCAV() && isNotSameCAVPIN(request);
    }

    match /questionnaires/{questID} {
      // Can only read + write my own data
      allow read, write: if isUser(request.resource.data.parentRef.uid);
    }

    // Don't allow writing to Teams and Orgs
    match /organizations/{orgID} {
      allow read;
      allow write: if false;
    }
    match /teams/{orgID} {
      allow read;
      allow write: if false;
    }
  }
}
